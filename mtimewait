#!/usr/bin/env bash
set -euo pipefail
shopt -s extglob

help () {
	printf '%q [-fhq] <age> <file>...\n' "$0"
	printf '\n'
	printf 'Wait for the specified files to have not been modified\n'
	printf 'recently.\n'
	printf '\n'
	printf -- '-f: Treat non-existant files as having been created at Unix\n'
	printf '    epoch, rather than erroring out.\n'
	printf '\n'
	printf -- '-h: Show this help message\n'
	printf '\n'
	printf -- '-q: Rather than waiting for files to have not been modified\n'
	printf '    within the specified time limit, just exit with a return\n'
	printf '    code of 1 if the files have been modified too recently.\n'
	printf '\n'
	printf -- '-v: Print wait times to stderr.\n'
	printf '\n'
	printf 'age: The minimum age for all files, in seconds, before this\n'
	printf '    command will return successfully.\n'
	printf '\n'
	printf 'file: The file (or multiple files) to check the mtimes of.\n'
	printf '\n'
	printf 'Return codes:\n'
	printf '0: All files were last modified at least <age> seconds ago.\n'
	printf '1: All files were last modified within the last <age>\n'
	printf '    seconds, and -q was specified.\n'
	printf '64: An invalid option was selected.\n'
	printf '66: At least one specified file does not exist, and -f was\n'
	printf '    not specified.\n'
}

force=
quick=
verbose=
have_negative=
while getopts :fhqv opt; do
	case "$opt" in
		f)	force=YesPlease;;
		h)	help
			exit 0
			;;
		q)	quick=YesPlease;;
		v)	verbose=YesPlease;;
		*)	if [[ "$OPTARG" =~ [0-9] ]]; then
				# Fine, it's not an option, it's a negative number
				have_negative=Yes
			else
				printf 'Unexpected option -%s\n\n' "$OPTARG" >&2
				help >&2
				exit 64  # EX_USAGE
			fi
			;;
	esac
done
declare -r force
if [[ "$have_negative" ]]; then
	# Don't strip the last option, as it's not an option but a negative
	# number (or the command line is completely bogus, in which case it'll
	# get thrown out by the check for an integer number of seconds).
	shift "$((OPTIND-2))"
else
	shift "$((OPTIND-1))"
fi

if [[ "$1" != 0 && ! "$1" =~ ^[+-]?[1-9][0-9]*$ ]]; then
	printf 'First argument must be an integer number of seconds\n\n' >&2
	help >&2
	exit 64  # EX_USAGE
fi

declare -ir target_age="$(( $1 * 1000000000 ))"
shift

declare -ar files=("$@")

if [[ "$verbose" ]]; then
	if command -v pv >/dev/null; then
		sleep () {
			local t="${1%%@(.000000000|*(0))}"
			echo "Sleeping for $t seconds" >&2
			command sleep "$t" | pv -t
		}
	else
		sleep () {
			local t="${1%%@(.000000000|*(0))}"
			echo "Sleeping for $t seconds" >&2
			command sleep "$t"
		}
	fi
fi

declare -i mtime max_mtime now age sleep
while :; do
	max_mtime=0
	for file in "${files[@]}"; do
		if [[ -e "$file" ]]; then
			mtime="$(date -r "$file" '+%s%N')"
		elif [[ "$force" ]]; then
			mtime=0
		else
			echo "Missing file: $file" >&2
			exit 66  # EX_NOINPUT
		fi
		(( mtime > max_mtime )) && max_mtime="$mtime"
	done

	now="$(date '+%s%N')"
	age="$((now - max_mtime))"
	if (( age >= target_age )); then
		exit 0
	elif [[ "$quick" ]]; then
		exit 1
	else
		sleep="$((target_age - age))"
		printf -v sleep_t '%d.%09d' "$((sleep/1000000000))" "$((sleep%1000000000))"
		sleep "$sleep_t"
	fi
done

# vim: ft=bash noet ts=8
