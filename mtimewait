#!/usr/bin/env bash
set -eu

help () {
	printf '%q [-fq] <age> <file>...\n' "$0"
	printf '\n'
	printf 'Wait for the specified files to have not been modified\n'
	printf 'recently.\n'
	printf '\n'
	printf -- '-f: Treat non-existant files as having been created at Unix\n'
	printf '    epoch, rather than erroring out.\n'
	printf '\n'
	printf -- '-q: Rather than waiting for files to have not been modified\n'
	printf '    within the specified time limit, just exit with a return\n'
	printf '    code of 1 if the files have been modified too recently.\n'
	printf '\n'
	printf -- '-v: Print wait times to stderr.\n'
	printf '\n'
	printf 'age: The minimum age for all files, in seconds, before this\n'
	printf '    command will return successfully.\n'
	printf '\n'
	printf 'file: The file (or multiple files) to check the mtimes of.\n'
	printf '\n'
	printf 'Return codes:\n'
	printf '0: All files were last modified at least <age> seconds ago.\n'
	printf '1: All files were last modified within the last <age>\n'
	printf '    seconds, and -q was specified.\n'
	printf '66: At least one specified file does not exist, and -f was\n'
	printf '    not specified.\n'
}

force=
quick=
verbose=
while getopts :fhqv opt; do
	case "$opt" in
		f)	force=YesPlease;;
		h)	help
			exit 0
			;;
		q)	quick=YesPlease;;
		v)	verbose=YesPlease;;
		*)	printf 'Unexpected option -%s\n\n' "$OPTARG" >&2
			help >&2
			exit 64  # EX_USAGE
			;;
	esac
done
declare -r force
shift "$((OPTIND-1))"

if [[ ! "$1" =~ ^[0-9]+$ ]]; then
	echo 'First argument must be an integer number of seconds' >&2
	help >&2
	exit 64  # EX_USAGE
fi

declare -ir target_age="$1"000000000
shift

declare -ar files=("$@")

if [[ "$verbose" ]]; then
	if command -v pv >/dev/null; then
		sleep () {
			echo "Sleeping for $1 seconds" >&2
			command sleep "$1" | pv -t
		}
	else
		sleep () {
			echo "Sleeping for $1 seconds" >&2
			command sleep "$1"
		}
	fi
fi

declare -i mtime max_mtime now age sleep
while :; do
	max_mtime=0
	for file in "${files[@]}"; do
		if [[ -e "$file" ]]; then
			mtime="$(date -r "$file" '+%s%N')"
		elif [[ "$force" ]]; then
			mtime=0
		else
			echo "Missing file: $file" >&2
			exit 66  # EX_NOINPUT
		fi
		(( mtime > max_mtime )) && max_mtime="$mtime"
	done

	now="$(date '+%s%N')"
	age="$((now - max_mtime))"
	if (( age >= target_age )); then
		exit 0
	elif [[ "$quick" ]]; then
		exit 1
	else
		sleep="$((target_age - age))"
		sleep_s="${sleep::-9}"  # Whole seconds, i.e. everything before the final nine digits
		sleep_ns="${sleep: -9}"  # Nanoseconds, i.e. the final nine digits
		sleep_ns="${sleep_ns##*(0)}"  # Needed to avoid "invalid octal number" errors
		printf -v sleep_s '%d.%09d' "$sleep_s" "$sleep_ns"
		sleep "$sleep_s"
	fi
done

# vim: ft=bash noet ts=8
